// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Calibration.proto

#ifndef PROTOBUF_Calibration_2eproto__INCLUDED
#define PROTOBUF_Calibration_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace calibration_grpc {
class CameraMatrix;
class CameraMatrixDefaultTypeInternal;
extern CameraMatrixDefaultTypeInternal _CameraMatrix_default_instance_;
class Images;
class ImagesDefaultTypeInternal;
extern ImagesDefaultTypeInternal _Images_default_instance_;
}  // namespace calibration_grpc

namespace calibration_grpc {

namespace protobuf_Calibration_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Calibration_2eproto

// ===================================================================

class Images : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:calibration_grpc.Images) */ {
 public:
  Images();
  virtual ~Images();

  Images(const Images& from);

  inline Images& operator=(const Images& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Images& default_instance();

  static inline const Images* internal_default_instance() {
    return reinterpret_cast<const Images*>(
               &_Images_default_instance_);
  }

  void Swap(Images* other);

  // implements Message ----------------------------------------------

  inline Images* New() const PROTOBUF_FINAL { return New(NULL); }

  Images* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Images& from);
  void MergeFrom(const Images& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Images* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes image = 1;
  int image_size() const;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::std::string& image(int index) const;
  ::std::string* mutable_image(int index);
  void set_image(int index, const ::std::string& value);
  void set_image(int index, const char* value);
  void set_image(int index, const void* value, size_t size);
  ::std::string* add_image();
  void add_image(const ::std::string& value);
  void add_image(const char* value);
  void add_image(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& image() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_image();

  // string phoneModel = 2;
  void clear_phonemodel();
  static const int kPhoneModelFieldNumber = 2;
  const ::std::string& phonemodel() const;
  void set_phonemodel(const ::std::string& value);
  #if LANG_CXX11
  void set_phonemodel(::std::string&& value);
  #endif
  void set_phonemodel(const char* value);
  void set_phonemodel(const char* value, size_t size);
  ::std::string* mutable_phonemodel();
  ::std::string* release_phonemodel();
  void set_allocated_phonemodel(::std::string* phonemodel);

  // @@protoc_insertion_point(class_scope:calibration_grpc.Images)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> image_;
  ::google::protobuf::internal::ArenaStringPtr phonemodel_;
  mutable int _cached_size_;
  friend struct  protobuf_Calibration_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CameraMatrix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:calibration_grpc.CameraMatrix) */ {
 public:
  CameraMatrix();
  virtual ~CameraMatrix();

  CameraMatrix(const CameraMatrix& from);

  inline CameraMatrix& operator=(const CameraMatrix& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraMatrix& default_instance();

  static inline const CameraMatrix* internal_default_instance() {
    return reinterpret_cast<const CameraMatrix*>(
               &_CameraMatrix_default_instance_);
  }

  void Swap(CameraMatrix* other);

  // implements Message ----------------------------------------------

  inline CameraMatrix* New() const PROTOBUF_FINAL { return New(NULL); }

  CameraMatrix* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CameraMatrix& from);
  void MergeFrom(const CameraMatrix& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CameraMatrix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double fx = 1;
  void clear_fx();
  static const int kFxFieldNumber = 1;
  double fx() const;
  void set_fx(double value);

  // double fy = 2;
  void clear_fy();
  static const int kFyFieldNumber = 2;
  double fy() const;
  void set_fy(double value);

  // double cx = 3;
  void clear_cx();
  static const int kCxFieldNumber = 3;
  double cx() const;
  void set_cx(double value);

  // double cy = 4;
  void clear_cy();
  static const int kCyFieldNumber = 4;
  double cy() const;
  void set_cy(double value);

  // @@protoc_insertion_point(class_scope:calibration_grpc.CameraMatrix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double fx_;
  double fy_;
  double cx_;
  double cy_;
  mutable int _cached_size_;
  friend struct  protobuf_Calibration_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Images

// repeated bytes image = 1;
inline int Images::image_size() const {
  return image_.size();
}
inline void Images::clear_image() {
  image_.Clear();
}
inline const ::std::string& Images::image(int index) const {
  // @@protoc_insertion_point(field_get:calibration_grpc.Images.image)
  return image_.Get(index);
}
inline ::std::string* Images::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:calibration_grpc.Images.image)
  return image_.Mutable(index);
}
inline void Images::set_image(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:calibration_grpc.Images.image)
  image_.Mutable(index)->assign(value);
}
inline void Images::set_image(int index, const char* value) {
  image_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:calibration_grpc.Images.image)
}
inline void Images::set_image(int index, const void* value, size_t size) {
  image_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:calibration_grpc.Images.image)
}
inline ::std::string* Images::add_image() {
  // @@protoc_insertion_point(field_add_mutable:calibration_grpc.Images.image)
  return image_.Add();
}
inline void Images::add_image(const ::std::string& value) {
  image_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:calibration_grpc.Images.image)
}
inline void Images::add_image(const char* value) {
  image_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:calibration_grpc.Images.image)
}
inline void Images::add_image(const void* value, size_t size) {
  image_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:calibration_grpc.Images.image)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Images::image() const {
  // @@protoc_insertion_point(field_list:calibration_grpc.Images.image)
  return image_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Images::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:calibration_grpc.Images.image)
  return &image_;
}

// string phoneModel = 2;
inline void Images::clear_phonemodel() {
  phonemodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Images::phonemodel() const {
  // @@protoc_insertion_point(field_get:calibration_grpc.Images.phoneModel)
  return phonemodel_.GetNoArena();
}
inline void Images::set_phonemodel(const ::std::string& value) {
  
  phonemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:calibration_grpc.Images.phoneModel)
}
#if LANG_CXX11
inline void Images::set_phonemodel(::std::string&& value) {
  
  phonemodel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:calibration_grpc.Images.phoneModel)
}
#endif
inline void Images::set_phonemodel(const char* value) {
  
  phonemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:calibration_grpc.Images.phoneModel)
}
inline void Images::set_phonemodel(const char* value, size_t size) {
  
  phonemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:calibration_grpc.Images.phoneModel)
}
inline ::std::string* Images::mutable_phonemodel() {
  
  // @@protoc_insertion_point(field_mutable:calibration_grpc.Images.phoneModel)
  return phonemodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Images::release_phonemodel() {
  // @@protoc_insertion_point(field_release:calibration_grpc.Images.phoneModel)
  
  return phonemodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Images::set_allocated_phonemodel(::std::string* phonemodel) {
  if (phonemodel != NULL) {
    
  } else {
    
  }
  phonemodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phonemodel);
  // @@protoc_insertion_point(field_set_allocated:calibration_grpc.Images.phoneModel)
}

// -------------------------------------------------------------------

// CameraMatrix

// double fx = 1;
inline void CameraMatrix::clear_fx() {
  fx_ = 0;
}
inline double CameraMatrix::fx() const {
  // @@protoc_insertion_point(field_get:calibration_grpc.CameraMatrix.fx)
  return fx_;
}
inline void CameraMatrix::set_fx(double value) {
  
  fx_ = value;
  // @@protoc_insertion_point(field_set:calibration_grpc.CameraMatrix.fx)
}

// double fy = 2;
inline void CameraMatrix::clear_fy() {
  fy_ = 0;
}
inline double CameraMatrix::fy() const {
  // @@protoc_insertion_point(field_get:calibration_grpc.CameraMatrix.fy)
  return fy_;
}
inline void CameraMatrix::set_fy(double value) {
  
  fy_ = value;
  // @@protoc_insertion_point(field_set:calibration_grpc.CameraMatrix.fy)
}

// double cx = 3;
inline void CameraMatrix::clear_cx() {
  cx_ = 0;
}
inline double CameraMatrix::cx() const {
  // @@protoc_insertion_point(field_get:calibration_grpc.CameraMatrix.cx)
  return cx_;
}
inline void CameraMatrix::set_cx(double value) {
  
  cx_ = value;
  // @@protoc_insertion_point(field_set:calibration_grpc.CameraMatrix.cx)
}

// double cy = 4;
inline void CameraMatrix::clear_cy() {
  cy_ = 0;
}
inline double CameraMatrix::cy() const {
  // @@protoc_insertion_point(field_get:calibration_grpc.CameraMatrix.cy)
  return cy_;
}
inline void CameraMatrix::set_cy(double value) {
  
  cy_ = value;
  // @@protoc_insertion_point(field_set:calibration_grpc.CameraMatrix.cy)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace calibration_grpc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Calibration_2eproto__INCLUDED
